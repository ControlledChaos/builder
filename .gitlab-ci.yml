image: wpbakery/ci-wordpress

stages:
  - codestyle
  - test
  - deploy
  - push

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - yarn.lock

before_script:
  ## https://docs.gitlab.com/ee/ci/ssh_keys/
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - ssh-keyscan -H 'github.com' >> $HOME/.ssh/known_hosts
  - ssh-keyscan -H 'gitlab.com' >> $HOME/.ssh/known_hosts
  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## and email.
  ##
  #- git config --global user.email "user@example.com"
  #- git config --global user.name "User name"
  # disable host key checking (NOTE: makes you susceptible to man-in-the-middle attacks)
  # WARNING: use only in docker container, if you use it with shell you will overwrite your user's ssh config
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

codestyle:js:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  except:
    - refactor
    - headerFooter
  script:
    - npm install standard@`node -p -e "require('./package.json').devDependencies.standard"` babel-eslint@`node -p -e "require('./package.json').devDependencies['babel-eslint']"`
    - yarn standard
  tags:
    - docker

codestyle:php:pluginFile:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml plugin-wordpress.php
  tags:
    - docker

codestyle:php:bootstrap:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml bootstrap
  tags:
    - docker

codestyle:php:framework:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml visualcomposer/Framework
  tags:
    - docker

codestyle:php:helpers:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml visualcomposer/Helpers
  tags:
    - docker

codestyle:php:modules:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml visualcomposer/Modules
  tags:
    - docker

codestyle:php:application:
  image: wpbakery/vc-hub-docker
  stage: codestyle
  script:
    - php ci/phpcs.phar --standard=ci/ruleset.xml visualcomposer/Application.php visualcomposer/Requirements.php
  tags:
    - docker

test:php:framework:
  stage: test
  script:
    - php ci/composer.phar install
    - php tools/php-composer/cli.php
    - php -d 'zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so' ci/phpunit-5.6.5.phar --configuration=ci/phpunit-framework-coverage.xml
    - php ci/coverage-test.php
  tags:
    - docker

test:php:helpers:
  stage: test
  script:
    - php ci/composer.phar install
    - php tools/php-composer/cli.php
    - php -d 'zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so' ci/phpunit-5.6.5.phar --configuration=ci/phpunit-helpers-coverage.xml
    - php ci/coverage-test.php
  tags:
    - docker

test:php:modules:
  stage: test
  script:
    - php ci/composer.phar install
    - php tools/php-composer/cli.php
    - php -d 'zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so' ci/phpunit-5.6.5.phar --configuration=ci/phpunit-modules-coverage.xml
    - php ci/coverage-test.php
  tags:
    - docker

test:js:storages:
  stage: test
  image: wpbakery/vc-hub-docker
  script:
    - yarn install
    - yarn build
    - yarn test
  tags:
    - docker

test:js:build:
  stage: test
  image: wpbakery/vc-hub-docker
  script:
    - yarn install
    - yarn build
    - cat public/dist/front.bundle.js | grep "webpackMissingModule" && exit 1
    - cat public/dist/vendor.bundle.js | grep "webpackMissingModule" && exit 1
    - cat public/dist/pe.bundle.js | grep "webpackMissingModule" && exit 1
    - cat public/dist/wp.bundle.js | grep "webpackMissingModule" && exit 1
    - cat public/dist/wpPostRebuild.bundle.js | grep "webpackMissingModule" && exit 1
    - if [ $? -eq 0 ]; then echo "good"; exit 0; else echo "fail"; exit 1; fi
  tags:
    - docker

# test:e2e:cypress:
#  stage: test
#  image:
#    name: visualcomposer/ci-wordpress:lamp-php-7.0-chrome
#    entrypoint: [""]
#  script:
#    - supervisord
#    - echo "<?php VcvEnv::set('VCV_ENV_DEV_ELEMENTS', true); VcvEnv::set('VCV_ENV_DEV_ADDONS', true); VcvEnv::set('VCV_ENV_EXTENSION_DOWNLOAD', false); require_once(__DIR__ . '/env.php');" > env-dev.php
#    - ln -s $CI_PROJECT_DIR /var/www/html/wp-content/plugins/builder
#    - ls -al /var/www/html/wp-content/plugins/builder
#    - yarn install
#    - yarn build
#    - chmod 777 /var/www/html/wp-content/uploads
#    - bash tools/elements/buildScript.sh
#    - git clone git@gitlab.com:visualcomposer-hub/hubtools.git
#    - php ci/composer.phar install
#    - yarn run cypress run --project ./tests/
#  tags:
#    - cypress
